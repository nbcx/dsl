// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: connection_protobuf.proto

package protobuf

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 用户登陆
type ConnectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fd  string `protobuf:"bytes,1,opt,name=fd,proto3" json:"fd,omitempty"`   // ClientID
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"` // 用户ID
}

func (x *ConnectionReq) Reset() {
	*x = ConnectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_protobuf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionReq) ProtoMessage() {}

func (x *ConnectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_connection_protobuf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionReq.ProtoReflect.Descriptor instead.
func (*ConnectionReq) Descriptor() ([]byte, []int) {
	return file_connection_protobuf_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectionReq) GetFd() string {
	if x != nil {
		return x.Fd
	}
	return ""
}

func (x *ConnectionReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type ConnectionRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ConnectionRsp) Reset() {
	*x = ConnectionRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_protobuf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionRsp) ProtoMessage() {}

func (x *ConnectionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_connection_protobuf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionRsp.ProtoReflect.Descriptor instead.
func (*ConnectionRsp) Descriptor() ([]byte, []int) {
	return file_connection_protobuf_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectionRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ConnectionRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_connection_protobuf_proto protoreflect.FileDescriptor

var file_connection_protobuf_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x31, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x66, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x8d, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x2c, 0x0a, 0x19, 0x69, 0x6f, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x42, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_connection_protobuf_proto_rawDescOnce sync.Once
	file_connection_protobuf_proto_rawDescData = file_connection_protobuf_proto_rawDesc
)

func file_connection_protobuf_proto_rawDescGZIP() []byte {
	file_connection_protobuf_proto_rawDescOnce.Do(func() {
		file_connection_protobuf_proto_rawDescData = protoimpl.X.CompressGZIP(file_connection_protobuf_proto_rawDescData)
	})
	return file_connection_protobuf_proto_rawDescData
}

var file_connection_protobuf_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_connection_protobuf_proto_goTypes = []interface{}{
	(*ConnectionReq)(nil), // 0: protobuf.ConnectionReq
	(*ConnectionRsp)(nil), // 1: protobuf.ConnectionRsp
}
var file_connection_protobuf_proto_depIdxs = []int32{
	0, // 0: protobuf.ConnectionServer.Offline:input_type -> protobuf.ConnectionReq
	0, // 1: protobuf.ConnectionServer.Info:input_type -> protobuf.ConnectionReq
	1, // 2: protobuf.ConnectionServer.Offline:output_type -> protobuf.ConnectionRsp
	1, // 3: protobuf.ConnectionServer.Info:output_type -> protobuf.ConnectionRsp
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_connection_protobuf_proto_init() }
func file_connection_protobuf_proto_init() {
	if File_connection_protobuf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_connection_protobuf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_protobuf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connection_protobuf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_connection_protobuf_proto_goTypes,
		DependencyIndexes: file_connection_protobuf_proto_depIdxs,
		MessageInfos:      file_connection_protobuf_proto_msgTypes,
	}.Build()
	File_connection_protobuf_proto = out.File
	file_connection_protobuf_proto_rawDesc = nil
	file_connection_protobuf_proto_goTypes = nil
	file_connection_protobuf_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConnectionServerClient is the client API for ConnectionServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectionServerClient interface {
	// 使连接断开
	Offline(ctx context.Context, in *ConnectionReq, opts ...grpc.CallOption) (*ConnectionRsp, error)
	// 获取连接信息
	Info(ctx context.Context, in *ConnectionReq, opts ...grpc.CallOption) (*ConnectionRsp, error)
}

type connectionServerClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionServerClient(cc grpc.ClientConnInterface) ConnectionServerClient {
	return &connectionServerClient{cc}
}

func (c *connectionServerClient) Offline(ctx context.Context, in *ConnectionReq, opts ...grpc.CallOption) (*ConnectionRsp, error) {
	out := new(ConnectionRsp)
	err := c.cc.Invoke(ctx, "/protobuf.ConnectionServer/Offline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServerClient) Info(ctx context.Context, in *ConnectionReq, opts ...grpc.CallOption) (*ConnectionRsp, error) {
	out := new(ConnectionRsp)
	err := c.cc.Invoke(ctx, "/protobuf.ConnectionServer/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionServerServer is the server API for ConnectionServer service.
type ConnectionServerServer interface {
	// 使连接断开
	Offline(context.Context, *ConnectionReq) (*ConnectionRsp, error)
	// 获取连接信息
	Info(context.Context, *ConnectionReq) (*ConnectionRsp, error)
}

// UnimplementedConnectionServerServer can be embedded to have forward compatible implementations.
type UnimplementedConnectionServerServer struct {
}

func (*UnimplementedConnectionServerServer) Offline(context.Context, *ConnectionReq) (*ConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Offline not implemented")
}
func (*UnimplementedConnectionServerServer) Info(context.Context, *ConnectionReq) (*ConnectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}

func RegisterConnectionServerServer(s *grpc.Server, srv ConnectionServerServer) {
	s.RegisterService(&_ConnectionServer_serviceDesc, srv)
}

func _ConnectionServer_Offline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServerServer).Offline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ConnectionServer/Offline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServerServer).Offline(ctx, req.(*ConnectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionServer_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServerServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ConnectionServer/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServerServer).Info(ctx, req.(*ConnectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnectionServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ConnectionServer",
	HandlerType: (*ConnectionServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Offline",
			Handler:    _ConnectionServer_Offline_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _ConnectionServer_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connection_protobuf.proto",
}
